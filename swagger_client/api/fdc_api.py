# coding: utf-8

"""
    Food Data Central API

    The FoodData Central API provides REST access to FoodData Central (FDC). It is intended primarily to assist application developers wishing to incorporate nutrient data into their applications or websites.   To take full advantage of the API, developers should familiarize themselves with the database by reading the database documentation available via links on [Data Type Documentation](https://fdc.nal.usda.gov/data-documentation.html). This documentation provides the detailed definitions and descriptions needed to understand the data elements referenced in the API documentation.      Additional details about the API including rate limits, access, and licensing are available on the [FDC website](https://fdc.nal.usda.gov/api-guide.html)  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class FDCApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_food(self, fdc_id, **kwargs):  # noqa: E501
        """Fetches details for one food item by FDC ID  # noqa: E501

        Retrieves a single food item by an FDC ID. Optional format and nutrients can be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_food(fdc_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fdc_id: FDC id of the food to retrieve (required)
        :param str format: Optional. 'abridged' for an abridged set of elements, 'full' for all elements (default).
        :param list[int] nutrients: Optional. List of up to 25 nutrient numbers. Only the nutrient information for the specified nutrients will be returned. Should be comma separated list (e.g. nutrients=203,204) or repeating parameters (e.g. nutrients=203&nutrients=204). If a food does not have any matching nutrients, the food will be returned with an empty foodNutrients element.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_food_with_http_info(fdc_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_food_with_http_info(fdc_id, **kwargs)  # noqa: E501
            return data

    def get_food_with_http_info(self, fdc_id, **kwargs):  # noqa: E501
        """Fetches details for one food item by FDC ID  # noqa: E501

        Retrieves a single food item by an FDC ID. Optional format and nutrients can be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_food_with_http_info(fdc_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fdc_id: FDC id of the food to retrieve (required)
        :param str format: Optional. 'abridged' for an abridged set of elements, 'full' for all elements (default).
        :param list[int] nutrients: Optional. List of up to 25 nutrient numbers. Only the nutrient information for the specified nutrients will be returned. Should be comma separated list (e.g. nutrients=203,204) or repeating parameters (e.g. nutrients=203&nutrients=204). If a food does not have any matching nutrients, the food will be returned with an empty foodNutrients element.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fdc_id', 'format', 'nutrients']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_food" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fdc_id' is set
        if ('fdc_id' not in params or
                params['fdc_id'] is None):
            raise ValueError("Missing the required parameter `fdc_id` when calling `get_food`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fdc_id' in params:
            path_params['fdcId'] = params['fdc_id']  # noqa: E501

        query_params = []
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'nutrients' in params:
            query_params.append(('nutrients', params['nutrients']))  # noqa: E501
            collection_formats['nutrients'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/food/{fdcId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_foods(self, fdc_ids, **kwargs):  # noqa: E501
        """Fetches details for multiple food items using input FDC IDs  # noqa: E501

        Retrieves a list of food items by a list of up to 20 FDC IDs. Optional format and nutrients can be specified. Invalid FDC ID's or ones that are not found are omitted and an empty set is returned if there are no matches.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_foods(fdc_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] fdc_ids: List of multiple FDC ID's. Should be comma separated list (e.g. fdcIds=534358,373052) or repeating parameters (e.g. fdcIds=534358&fdcIds=373052). (required)
        :param str format: Optional. 'abridged' for an abridged set of elements, 'full' for all elements (default).
        :param list[int] nutrients: Optional. List of up to 25 nutrient numbers. Only the nutrient information for the specified nutrients will be returned. Should be comma separated list (e.g. nutrients=203,204) or repeating parameters (e.g. nutrients=203&nutrients=204). If a food does not have any matching nutrients, the food will be returned with an empty foodNutrients element.
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_foods_with_http_info(fdc_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.get_foods_with_http_info(fdc_ids, **kwargs)  # noqa: E501
            return data

    def get_foods_with_http_info(self, fdc_ids, **kwargs):  # noqa: E501
        """Fetches details for multiple food items using input FDC IDs  # noqa: E501

        Retrieves a list of food items by a list of up to 20 FDC IDs. Optional format and nutrients can be specified. Invalid FDC ID's or ones that are not found are omitted and an empty set is returned if there are no matches.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_foods_with_http_info(fdc_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] fdc_ids: List of multiple FDC ID's. Should be comma separated list (e.g. fdcIds=534358,373052) or repeating parameters (e.g. fdcIds=534358&fdcIds=373052). (required)
        :param str format: Optional. 'abridged' for an abridged set of elements, 'full' for all elements (default).
        :param list[int] nutrients: Optional. List of up to 25 nutrient numbers. Only the nutrient information for the specified nutrients will be returned. Should be comma separated list (e.g. nutrients=203,204) or repeating parameters (e.g. nutrients=203&nutrients=204). If a food does not have any matching nutrients, the food will be returned with an empty foodNutrients element.
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fdc_ids', 'format', 'nutrients']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_foods" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fdc_ids' is set
        if ('fdc_ids' not in params or
                params['fdc_ids'] is None):
            raise ValueError("Missing the required parameter `fdc_ids` when calling `get_foods`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fdc_ids' in params:
            query_params.append(('fdcIds', params['fdc_ids']))  # noqa: E501
            collection_formats['fdcIds'] = 'multi'  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'nutrients' in params:
            query_params.append(('nutrients', params['nutrients']))  # noqa: E501
            collection_formats['nutrients'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/foods', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_foods_list(self, **kwargs):  # noqa: E501
        """Returns a paged list of foods, in the 'abridged' format  # noqa: E501

        Retrieves a paged list of foods. Use the pageNumber parameter to page through the entire result set.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_foods_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] data_type: Optional. Filter on a specific data type; specify one or more values in an array.
        :param int page_size: Optional. Maximum number of results to return for the current page. Default is 50.
        :param int page_number: Optional. Page number to retrieve. The offset into the overall result set is expressed as (pageNumber * pageSize)
        :param str sort_by: Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and lowercaseDescription.keyword will be description in future releases.
        :param str sort_order: Optional. The sort direction for the results. Only applicable if sortBy is specified.
        :return: list[AbridgedFoodItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_foods_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_foods_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_foods_list_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a paged list of foods, in the 'abridged' format  # noqa: E501

        Retrieves a paged list of foods. Use the pageNumber parameter to page through the entire result set.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_foods_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] data_type: Optional. Filter on a specific data type; specify one or more values in an array.
        :param int page_size: Optional. Maximum number of results to return for the current page. Default is 50.
        :param int page_number: Optional. Page number to retrieve. The offset into the overall result set is expressed as (pageNumber * pageSize)
        :param str sort_by: Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and lowercaseDescription.keyword will be description in future releases.
        :param str sort_order: Optional. The sort direction for the results. Only applicable if sortBy is specified.
        :return: list[AbridgedFoodItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_type', 'page_size', 'page_number', 'sort_by', 'sort_order']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_foods_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'data_type' in params:
            query_params.append(('dataType', params['data_type']))  # noqa: E501
            collection_formats['dataType'] = 'csv'  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('pageNumber', params['page_number']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sortBy', params['sort_by']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sortOrder', params['sort_order']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/foods/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AbridgedFoodItem]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_foods_search(self, query, **kwargs):  # noqa: E501
        """Returns a list of foods that matched search (query) keywords  # noqa: E501

        Search for foods using keywords. Results can be filtered by dataType and there are options for result page sizes or sorting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_foods_search(query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: One or more search terms.  The string may include [search operators](https://fdc.nal.usda.gov/help.html#bkmk-2) (required)
        :param list[str] data_type: Optional. Filter on a specific data type; specify one or more values in an array.
        :param int page_size: Optional. Maximum number of results to return for the current page. Default is 50.
        :param int page_number: Optional. Page number to retrieve. The offset into the overall result set is expressed as (pageNumber * pageSize)
        :param str sort_by: Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and lowercaseDescription.keyword will be description in future releases.
        :param str sort_order: Optional. The sort direction for the results. Only applicable if sortBy is specified.
        :param str brand_owner: Optional. Filter results based on the brand owner of the food. Only applies to Branded Foods
        :return: SearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_foods_search_with_http_info(query, **kwargs)  # noqa: E501
        else:
            (data) = self.get_foods_search_with_http_info(query, **kwargs)  # noqa: E501
            return data

    def get_foods_search_with_http_info(self, query, **kwargs):  # noqa: E501
        """Returns a list of foods that matched search (query) keywords  # noqa: E501

        Search for foods using keywords. Results can be filtered by dataType and there are options for result page sizes or sorting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_foods_search_with_http_info(query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: One or more search terms.  The string may include [search operators](https://fdc.nal.usda.gov/help.html#bkmk-2) (required)
        :param list[str] data_type: Optional. Filter on a specific data type; specify one or more values in an array.
        :param int page_size: Optional. Maximum number of results to return for the current page. Default is 50.
        :param int page_number: Optional. Page number to retrieve. The offset into the overall result set is expressed as (pageNumber * pageSize)
        :param str sort_by: Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and lowercaseDescription.keyword will be description in future releases.
        :param str sort_order: Optional. The sort direction for the results. Only applicable if sortBy is specified.
        :param str brand_owner: Optional. Filter results based on the brand owner of the food. Only applies to Branded Foods
        :return: SearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query', 'data_type', 'page_size', 'page_number', 'sort_by', 'sort_order', 'brand_owner']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_foods_search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'query' is set
        if ('query' not in params or
                params['query'] is None):
            raise ValueError("Missing the required parameter `query` when calling `get_foods_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'data_type' in params:
            query_params.append(('dataType', params['data_type']))  # noqa: E501
            collection_formats['dataType'] = 'csv'  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('pageNumber', params['page_number']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sortBy', params['sort_by']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sortOrder', params['sort_order']))  # noqa: E501
        if 'brand_owner' in params:
            query_params.append(('brandOwner', params['brand_owner']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/foods/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_json_spec(self, **kwargs):  # noqa: E501
        """Returns this documentation in JSON format  # noqa: E501

        The OpenAPI 3.0 specification for the FDC API rendered as JSON (JavaScript Object Notation)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_json_spec(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_json_spec_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_json_spec_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_json_spec_with_http_info(self, **kwargs):  # noqa: E501
        """Returns this documentation in JSON format  # noqa: E501

        The OpenAPI 3.0 specification for the FDC API rendered as JSON (JavaScript Object Notation)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_json_spec_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_json_spec" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/json-spec', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_yaml_spec(self, **kwargs):  # noqa: E501
        """Returns this documentation in JSON format  # noqa: E501

        The OpenAPI 3.0 specification for the FDC API rendered as YAML (YAML Ain't Markup Language)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_yaml_spec(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_yaml_spec_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_yaml_spec_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_yaml_spec_with_http_info(self, **kwargs):  # noqa: E501
        """Returns this documentation in JSON format  # noqa: E501

        The OpenAPI 3.0 specification for the FDC API rendered as YAML (YAML Ain't Markup Language)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_yaml_spec_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_yaml_spec" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/yaml-spec', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_foods(self, body, **kwargs):  # noqa: E501
        """Fetches details for multiple food items using input FDC IDs  # noqa: E501

        Retrieves a list of food items by a list of up to 20 FDC IDs. Optional format and nutrients can be specified. Invalid FDC ID's or ones that are not found are omitted and an empty set is returned if there are no matches.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_foods(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FoodsCriteria body: (required)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_foods_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_foods_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_foods_with_http_info(self, body, **kwargs):  # noqa: E501
        """Fetches details for multiple food items using input FDC IDs  # noqa: E501

        Retrieves a list of food items by a list of up to 20 FDC IDs. Optional format and nutrients can be specified. Invalid FDC ID's or ones that are not found are omitted and an empty set is returned if there are no matches.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_foods_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FoodsCriteria body: (required)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_foods" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_foods`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/foods', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_foods_list(self, body, **kwargs):  # noqa: E501
        """Returns a paged list of foods, in the 'abridged' format  # noqa: E501

        Retrieves a paged list of foods. Use the pageNumber parameter to page through the entire result set.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_foods_list(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FoodListCriteria body: (required)
        :return: list[AbridgedFoodItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_foods_list_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_foods_list_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_foods_list_with_http_info(self, body, **kwargs):  # noqa: E501
        """Returns a paged list of foods, in the 'abridged' format  # noqa: E501

        Retrieves a paged list of foods. Use the pageNumber parameter to page through the entire result set.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_foods_list_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FoodListCriteria body: (required)
        :return: list[AbridgedFoodItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_foods_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_foods_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/foods/list', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AbridgedFoodItem]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_foods_search(self, body, **kwargs):  # noqa: E501
        """Returns a list of foods that matched search (query) keywords  # noqa: E501

        Search for foods using keywords. Results can be filtered by dataType and there are options for result page sizes or sorting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_foods_search(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FoodSearchCriteria body: The query string may also include standard [search operators](https://fdc.nal.usda.gov/help.html#bkmk-2) (required)
        :return: SearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_foods_search_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_foods_search_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_foods_search_with_http_info(self, body, **kwargs):  # noqa: E501
        """Returns a list of foods that matched search (query) keywords  # noqa: E501

        Search for foods using keywords. Results can be filtered by dataType and there are options for result page sizes or sorting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_foods_search_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FoodSearchCriteria body: The query string may also include standard [search operators](https://fdc.nal.usda.gov/help.html#bkmk-2) (required)
        :return: SearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_foods_search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_foods_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/foods/search', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
