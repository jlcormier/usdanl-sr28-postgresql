# coding: utf-8

"""
    Food Data Central API

    The FoodData Central API provides REST access to FoodData Central (FDC). It is intended primarily to assist application developers wishing to incorporate nutrient data into their applications or websites.   To take full advantage of the API, developers should familiarize themselves with the database by reading the database documentation available via links on [Data Type Documentation](https://fdc.nal.usda.gov/data-documentation.html). This documentation provides the detailed definitions and descriptions needed to understand the data elements referenced in the API documentation.      Additional details about the API including rate limits, access, and licensing are available on the [FDC website](https://fdc.nal.usda.gov/api-guide.html)  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FoodListCriteria(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_type': 'list[str]',
        'page_size': 'int',
        'page_number': 'int',
        'sort_by': 'str',
        'sort_order': 'str'
    }

    attribute_map = {
        'data_type': 'dataType',
        'page_size': 'pageSize',
        'page_number': 'pageNumber',
        'sort_by': 'sortBy',
        'sort_order': 'sortOrder'
    }

    def __init__(self, data_type=None, page_size=None, page_number=None, sort_by=None, sort_order=None):  # noqa: E501
        """FoodListCriteria - a model defined in Swagger"""  # noqa: E501
        self._data_type = None
        self._page_size = None
        self._page_number = None
        self._sort_by = None
        self._sort_order = None
        self.discriminator = None
        if data_type is not None:
            self.data_type = data_type
        if page_size is not None:
            self.page_size = page_size
        if page_number is not None:
            self.page_number = page_number
        if sort_by is not None:
            self.sort_by = sort_by
        if sort_order is not None:
            self.sort_order = sort_order

    @property
    def data_type(self):
        """Gets the data_type of this FoodListCriteria.  # noqa: E501

        Optional. Filter on a specific data type; specify one or more values in an array.  # noqa: E501

        :return: The data_type of this FoodListCriteria.  # noqa: E501
        :rtype: list[str]
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this FoodListCriteria.

        Optional. Filter on a specific data type; specify one or more values in an array.  # noqa: E501

        :param data_type: The data_type of this FoodListCriteria.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["Branded", "Foundation", "Survey (FNDDS)", "SR Legacy"]  # noqa: E501
        if not set(data_type).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `data_type` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(data_type) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._data_type = data_type

    @property
    def page_size(self):
        """Gets the page_size of this FoodListCriteria.  # noqa: E501

        Optional. Maximum number of results to return for the current page. Default is 50.  # noqa: E501

        :return: The page_size of this FoodListCriteria.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this FoodListCriteria.

        Optional. Maximum number of results to return for the current page. Default is 50.  # noqa: E501

        :param page_size: The page_size of this FoodListCriteria.  # noqa: E501
        :type: int
        """

        self._page_size = page_size

    @property
    def page_number(self):
        """Gets the page_number of this FoodListCriteria.  # noqa: E501

        Optional. Page number to retrieve. The offset into the overall result set is expressed as (pageNumber * pageSize)  # noqa: E501

        :return: The page_number of this FoodListCriteria.  # noqa: E501
        :rtype: int
        """
        return self._page_number

    @page_number.setter
    def page_number(self, page_number):
        """Sets the page_number of this FoodListCriteria.

        Optional. Page number to retrieve. The offset into the overall result set is expressed as (pageNumber * pageSize)  # noqa: E501

        :param page_number: The page_number of this FoodListCriteria.  # noqa: E501
        :type: int
        """

        self._page_number = page_number

    @property
    def sort_by(self):
        """Gets the sort_by of this FoodListCriteria.  # noqa: E501

        Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and lowercaseDescription.keyword will be description in future releases.  # noqa: E501

        :return: The sort_by of this FoodListCriteria.  # noqa: E501
        :rtype: str
        """
        return self._sort_by

    @sort_by.setter
    def sort_by(self, sort_by):
        """Sets the sort_by of this FoodListCriteria.

        Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and lowercaseDescription.keyword will be description in future releases.  # noqa: E501

        :param sort_by: The sort_by of this FoodListCriteria.  # noqa: E501
        :type: str
        """
        allowed_values = ["dataType.keyword", "lowercaseDescription.keyword", "fdcId", "publishedDate"]  # noqa: E501
        if sort_by not in allowed_values:
            raise ValueError(
                "Invalid value for `sort_by` ({0}), must be one of {1}"  # noqa: E501
                .format(sort_by, allowed_values)
            )

        self._sort_by = sort_by

    @property
    def sort_order(self):
        """Gets the sort_order of this FoodListCriteria.  # noqa: E501

        Optional. The sort direction for the results. Only applicable if sortBy is specified.  # noqa: E501

        :return: The sort_order of this FoodListCriteria.  # noqa: E501
        :rtype: str
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this FoodListCriteria.

        Optional. The sort direction for the results. Only applicable if sortBy is specified.  # noqa: E501

        :param sort_order: The sort_order of this FoodListCriteria.  # noqa: E501
        :type: str
        """
        allowed_values = ["asc", "desc"]  # noqa: E501
        if sort_order not in allowed_values:
            raise ValueError(
                "Invalid value for `sort_order` ({0}), must be one of {1}"  # noqa: E501
                .format(sort_order, allowed_values)
            )

        self._sort_order = sort_order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FoodListCriteria, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FoodListCriteria):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
