# coding: utf-8

"""
    Food Data Central API

    The FoodData Central API provides REST access to FoodData Central (FDC). It is intended primarily to assist application developers wishing to incorporate nutrient data into their applications or websites.   To take full advantage of the API, developers should familiarize themselves with the database by reading the database documentation available via links on [Data Type Documentation](https://fdc.nal.usda.gov/data-documentation.html). This documentation provides the detailed definitions and descriptions needed to understand the data elements referenced in the API documentation.      Additional details about the API including rate limits, access, and licensing are available on the [FDC website](https://fdc.nal.usda.gov/api-guide.html)  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BrandedFoodItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fdc_id': 'int',
        'available_date': 'str',
        'brand_owner': 'str',
        'data_source': 'str',
        'data_type': 'str',
        'description': 'str',
        'food_class': 'str',
        'gtin_upc': 'str',
        'household_serving_full_text': 'str',
        'ingredients': 'str',
        'modified_date': 'str',
        'publication_date': 'str',
        'serving_size': 'int',
        'serving_size_unit': 'str',
        'preparation_state_code': 'str',
        'branded_food_category': 'str',
        'trade_channel': 'list[str]',
        'gpc_class_code': 'int',
        'food_nutrients': 'list[FoodNutrient]',
        'food_update_log': 'list[FoodUpdateLog]',
        'label_nutrients': 'BrandedFoodItemLabelNutrients'
    }

    attribute_map = {
        'fdc_id': 'fdcId',
        'available_date': 'availableDate',
        'brand_owner': 'brandOwner',
        'data_source': 'dataSource',
        'data_type': 'dataType',
        'description': 'description',
        'food_class': 'foodClass',
        'gtin_upc': 'gtinUpc',
        'household_serving_full_text': 'householdServingFullText',
        'ingredients': 'ingredients',
        'modified_date': 'modifiedDate',
        'publication_date': 'publicationDate',
        'serving_size': 'servingSize',
        'serving_size_unit': 'servingSizeUnit',
        'preparation_state_code': 'preparationStateCode',
        'branded_food_category': 'brandedFoodCategory',
        'trade_channel': 'tradeChannel',
        'gpc_class_code': 'gpcClassCode',
        'food_nutrients': 'foodNutrients',
        'food_update_log': 'foodUpdateLog',
        'label_nutrients': 'labelNutrients'
    }

    def __init__(self, fdc_id=None, available_date=None, brand_owner=None, data_source=None, data_type=None, description=None, food_class=None, gtin_upc=None, household_serving_full_text=None, ingredients=None, modified_date=None, publication_date=None, serving_size=None, serving_size_unit=None, preparation_state_code=None, branded_food_category=None, trade_channel=None, gpc_class_code=None, food_nutrients=None, food_update_log=None, label_nutrients=None):  # noqa: E501
        """BrandedFoodItem - a model defined in Swagger"""  # noqa: E501
        self._fdc_id = None
        self._available_date = None
        self._brand_owner = None
        self._data_source = None
        self._data_type = None
        self._description = None
        self._food_class = None
        self._gtin_upc = None
        self._household_serving_full_text = None
        self._ingredients = None
        self._modified_date = None
        self._publication_date = None
        self._serving_size = None
        self._serving_size_unit = None
        self._preparation_state_code = None
        self._branded_food_category = None
        self._trade_channel = None
        self._gpc_class_code = None
        self._food_nutrients = None
        self._food_update_log = None
        self._label_nutrients = None
        self.discriminator = None
        self.fdc_id = fdc_id
        if available_date is not None:
            self.available_date = available_date
        if brand_owner is not None:
            self.brand_owner = brand_owner
        if data_source is not None:
            self.data_source = data_source
        self.data_type = data_type
        self.description = description
        if food_class is not None:
            self.food_class = food_class
        if gtin_upc is not None:
            self.gtin_upc = gtin_upc
        if household_serving_full_text is not None:
            self.household_serving_full_text = household_serving_full_text
        if ingredients is not None:
            self.ingredients = ingredients
        if modified_date is not None:
            self.modified_date = modified_date
        if publication_date is not None:
            self.publication_date = publication_date
        if serving_size is not None:
            self.serving_size = serving_size
        if serving_size_unit is not None:
            self.serving_size_unit = serving_size_unit
        if preparation_state_code is not None:
            self.preparation_state_code = preparation_state_code
        if branded_food_category is not None:
            self.branded_food_category = branded_food_category
        if trade_channel is not None:
            self.trade_channel = trade_channel
        if gpc_class_code is not None:
            self.gpc_class_code = gpc_class_code
        if food_nutrients is not None:
            self.food_nutrients = food_nutrients
        if food_update_log is not None:
            self.food_update_log = food_update_log
        if label_nutrients is not None:
            self.label_nutrients = label_nutrients

    @property
    def fdc_id(self):
        """Gets the fdc_id of this BrandedFoodItem.  # noqa: E501


        :return: The fdc_id of this BrandedFoodItem.  # noqa: E501
        :rtype: int
        """
        return self._fdc_id

    @fdc_id.setter
    def fdc_id(self, fdc_id):
        """Sets the fdc_id of this BrandedFoodItem.


        :param fdc_id: The fdc_id of this BrandedFoodItem.  # noqa: E501
        :type: int
        """
        if fdc_id is None:
            raise ValueError("Invalid value for `fdc_id`, must not be `None`")  # noqa: E501

        self._fdc_id = fdc_id

    @property
    def available_date(self):
        """Gets the available_date of this BrandedFoodItem.  # noqa: E501


        :return: The available_date of this BrandedFoodItem.  # noqa: E501
        :rtype: str
        """
        return self._available_date

    @available_date.setter
    def available_date(self, available_date):
        """Sets the available_date of this BrandedFoodItem.


        :param available_date: The available_date of this BrandedFoodItem.  # noqa: E501
        :type: str
        """

        self._available_date = available_date

    @property
    def brand_owner(self):
        """Gets the brand_owner of this BrandedFoodItem.  # noqa: E501


        :return: The brand_owner of this BrandedFoodItem.  # noqa: E501
        :rtype: str
        """
        return self._brand_owner

    @brand_owner.setter
    def brand_owner(self, brand_owner):
        """Sets the brand_owner of this BrandedFoodItem.


        :param brand_owner: The brand_owner of this BrandedFoodItem.  # noqa: E501
        :type: str
        """

        self._brand_owner = brand_owner

    @property
    def data_source(self):
        """Gets the data_source of this BrandedFoodItem.  # noqa: E501


        :return: The data_source of this BrandedFoodItem.  # noqa: E501
        :rtype: str
        """
        return self._data_source

    @data_source.setter
    def data_source(self, data_source):
        """Sets the data_source of this BrandedFoodItem.


        :param data_source: The data_source of this BrandedFoodItem.  # noqa: E501
        :type: str
        """

        self._data_source = data_source

    @property
    def data_type(self):
        """Gets the data_type of this BrandedFoodItem.  # noqa: E501


        :return: The data_type of this BrandedFoodItem.  # noqa: E501
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this BrandedFoodItem.


        :param data_type: The data_type of this BrandedFoodItem.  # noqa: E501
        :type: str
        """
        if data_type is None:
            raise ValueError("Invalid value for `data_type`, must not be `None`")  # noqa: E501

        self._data_type = data_type

    @property
    def description(self):
        """Gets the description of this BrandedFoodItem.  # noqa: E501


        :return: The description of this BrandedFoodItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BrandedFoodItem.


        :param description: The description of this BrandedFoodItem.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def food_class(self):
        """Gets the food_class of this BrandedFoodItem.  # noqa: E501


        :return: The food_class of this BrandedFoodItem.  # noqa: E501
        :rtype: str
        """
        return self._food_class

    @food_class.setter
    def food_class(self, food_class):
        """Sets the food_class of this BrandedFoodItem.


        :param food_class: The food_class of this BrandedFoodItem.  # noqa: E501
        :type: str
        """

        self._food_class = food_class

    @property
    def gtin_upc(self):
        """Gets the gtin_upc of this BrandedFoodItem.  # noqa: E501


        :return: The gtin_upc of this BrandedFoodItem.  # noqa: E501
        :rtype: str
        """
        return self._gtin_upc

    @gtin_upc.setter
    def gtin_upc(self, gtin_upc):
        """Sets the gtin_upc of this BrandedFoodItem.


        :param gtin_upc: The gtin_upc of this BrandedFoodItem.  # noqa: E501
        :type: str
        """

        self._gtin_upc = gtin_upc

    @property
    def household_serving_full_text(self):
        """Gets the household_serving_full_text of this BrandedFoodItem.  # noqa: E501


        :return: The household_serving_full_text of this BrandedFoodItem.  # noqa: E501
        :rtype: str
        """
        return self._household_serving_full_text

    @household_serving_full_text.setter
    def household_serving_full_text(self, household_serving_full_text):
        """Sets the household_serving_full_text of this BrandedFoodItem.


        :param household_serving_full_text: The household_serving_full_text of this BrandedFoodItem.  # noqa: E501
        :type: str
        """

        self._household_serving_full_text = household_serving_full_text

    @property
    def ingredients(self):
        """Gets the ingredients of this BrandedFoodItem.  # noqa: E501


        :return: The ingredients of this BrandedFoodItem.  # noqa: E501
        :rtype: str
        """
        return self._ingredients

    @ingredients.setter
    def ingredients(self, ingredients):
        """Sets the ingredients of this BrandedFoodItem.


        :param ingredients: The ingredients of this BrandedFoodItem.  # noqa: E501
        :type: str
        """

        self._ingredients = ingredients

    @property
    def modified_date(self):
        """Gets the modified_date of this BrandedFoodItem.  # noqa: E501


        :return: The modified_date of this BrandedFoodItem.  # noqa: E501
        :rtype: str
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this BrandedFoodItem.


        :param modified_date: The modified_date of this BrandedFoodItem.  # noqa: E501
        :type: str
        """

        self._modified_date = modified_date

    @property
    def publication_date(self):
        """Gets the publication_date of this BrandedFoodItem.  # noqa: E501


        :return: The publication_date of this BrandedFoodItem.  # noqa: E501
        :rtype: str
        """
        return self._publication_date

    @publication_date.setter
    def publication_date(self, publication_date):
        """Sets the publication_date of this BrandedFoodItem.


        :param publication_date: The publication_date of this BrandedFoodItem.  # noqa: E501
        :type: str
        """

        self._publication_date = publication_date

    @property
    def serving_size(self):
        """Gets the serving_size of this BrandedFoodItem.  # noqa: E501


        :return: The serving_size of this BrandedFoodItem.  # noqa: E501
        :rtype: int
        """
        return self._serving_size

    @serving_size.setter
    def serving_size(self, serving_size):
        """Sets the serving_size of this BrandedFoodItem.


        :param serving_size: The serving_size of this BrandedFoodItem.  # noqa: E501
        :type: int
        """

        self._serving_size = serving_size

    @property
    def serving_size_unit(self):
        """Gets the serving_size_unit of this BrandedFoodItem.  # noqa: E501


        :return: The serving_size_unit of this BrandedFoodItem.  # noqa: E501
        :rtype: str
        """
        return self._serving_size_unit

    @serving_size_unit.setter
    def serving_size_unit(self, serving_size_unit):
        """Sets the serving_size_unit of this BrandedFoodItem.


        :param serving_size_unit: The serving_size_unit of this BrandedFoodItem.  # noqa: E501
        :type: str
        """

        self._serving_size_unit = serving_size_unit

    @property
    def preparation_state_code(self):
        """Gets the preparation_state_code of this BrandedFoodItem.  # noqa: E501


        :return: The preparation_state_code of this BrandedFoodItem.  # noqa: E501
        :rtype: str
        """
        return self._preparation_state_code

    @preparation_state_code.setter
    def preparation_state_code(self, preparation_state_code):
        """Sets the preparation_state_code of this BrandedFoodItem.


        :param preparation_state_code: The preparation_state_code of this BrandedFoodItem.  # noqa: E501
        :type: str
        """

        self._preparation_state_code = preparation_state_code

    @property
    def branded_food_category(self):
        """Gets the branded_food_category of this BrandedFoodItem.  # noqa: E501


        :return: The branded_food_category of this BrandedFoodItem.  # noqa: E501
        :rtype: str
        """
        return self._branded_food_category

    @branded_food_category.setter
    def branded_food_category(self, branded_food_category):
        """Sets the branded_food_category of this BrandedFoodItem.


        :param branded_food_category: The branded_food_category of this BrandedFoodItem.  # noqa: E501
        :type: str
        """

        self._branded_food_category = branded_food_category

    @property
    def trade_channel(self):
        """Gets the trade_channel of this BrandedFoodItem.  # noqa: E501


        :return: The trade_channel of this BrandedFoodItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._trade_channel

    @trade_channel.setter
    def trade_channel(self, trade_channel):
        """Sets the trade_channel of this BrandedFoodItem.


        :param trade_channel: The trade_channel of this BrandedFoodItem.  # noqa: E501
        :type: list[str]
        """

        self._trade_channel = trade_channel

    @property
    def gpc_class_code(self):
        """Gets the gpc_class_code of this BrandedFoodItem.  # noqa: E501


        :return: The gpc_class_code of this BrandedFoodItem.  # noqa: E501
        :rtype: int
        """
        return self._gpc_class_code

    @gpc_class_code.setter
    def gpc_class_code(self, gpc_class_code):
        """Sets the gpc_class_code of this BrandedFoodItem.


        :param gpc_class_code: The gpc_class_code of this BrandedFoodItem.  # noqa: E501
        :type: int
        """

        self._gpc_class_code = gpc_class_code

    @property
    def food_nutrients(self):
        """Gets the food_nutrients of this BrandedFoodItem.  # noqa: E501


        :return: The food_nutrients of this BrandedFoodItem.  # noqa: E501
        :rtype: list[FoodNutrient]
        """
        return self._food_nutrients

    @food_nutrients.setter
    def food_nutrients(self, food_nutrients):
        """Sets the food_nutrients of this BrandedFoodItem.


        :param food_nutrients: The food_nutrients of this BrandedFoodItem.  # noqa: E501
        :type: list[FoodNutrient]
        """

        self._food_nutrients = food_nutrients

    @property
    def food_update_log(self):
        """Gets the food_update_log of this BrandedFoodItem.  # noqa: E501


        :return: The food_update_log of this BrandedFoodItem.  # noqa: E501
        :rtype: list[FoodUpdateLog]
        """
        return self._food_update_log

    @food_update_log.setter
    def food_update_log(self, food_update_log):
        """Sets the food_update_log of this BrandedFoodItem.


        :param food_update_log: The food_update_log of this BrandedFoodItem.  # noqa: E501
        :type: list[FoodUpdateLog]
        """

        self._food_update_log = food_update_log

    @property
    def label_nutrients(self):
        """Gets the label_nutrients of this BrandedFoodItem.  # noqa: E501


        :return: The label_nutrients of this BrandedFoodItem.  # noqa: E501
        :rtype: BrandedFoodItemLabelNutrients
        """
        return self._label_nutrients

    @label_nutrients.setter
    def label_nutrients(self, label_nutrients):
        """Sets the label_nutrients of this BrandedFoodItem.


        :param label_nutrients: The label_nutrients of this BrandedFoodItem.  # noqa: E501
        :type: BrandedFoodItemLabelNutrients
        """

        self._label_nutrients = label_nutrients

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BrandedFoodItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BrandedFoodItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
