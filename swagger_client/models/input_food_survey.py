# coding: utf-8

"""
    Food Data Central API

    The FoodData Central API provides REST access to FoodData Central (FDC). It is intended primarily to assist application developers wishing to incorporate nutrient data into their applications or websites.   To take full advantage of the API, developers should familiarize themselves with the database by reading the database documentation available via links on [Data Type Documentation](https://fdc.nal.usda.gov/data-documentation.html). This documentation provides the detailed definitions and descriptions needed to understand the data elements referenced in the API documentation.      Additional details about the API including rate limits, access, and licensing are available on the [FDC website](https://fdc.nal.usda.gov/api-guide.html)  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InputFoodSurvey(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'amount': 'float',
        'food_description': 'str',
        'ingredient_code': 'int',
        'ingredient_description': 'str',
        'ingredient_weight': 'float',
        'portion_code': 'str',
        'portion_description': 'str',
        'sequence_number': 'int',
        'survey_flag': 'int',
        'unit': 'str',
        'input_food': 'SurveyFoodItem',
        'retention_factor': 'RetentionFactor'
    }

    attribute_map = {
        'id': 'id',
        'amount': 'amount',
        'food_description': 'foodDescription',
        'ingredient_code': 'ingredientCode',
        'ingredient_description': 'ingredientDescription',
        'ingredient_weight': 'ingredientWeight',
        'portion_code': 'portionCode',
        'portion_description': 'portionDescription',
        'sequence_number': 'sequenceNumber',
        'survey_flag': 'surveyFlag',
        'unit': 'unit',
        'input_food': 'inputFood',
        'retention_factor': 'retentionFactor'
    }

    def __init__(self, id=None, amount=None, food_description=None, ingredient_code=None, ingredient_description=None, ingredient_weight=None, portion_code=None, portion_description=None, sequence_number=None, survey_flag=None, unit=None, input_food=None, retention_factor=None):  # noqa: E501
        """InputFoodSurvey - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._amount = None
        self._food_description = None
        self._ingredient_code = None
        self._ingredient_description = None
        self._ingredient_weight = None
        self._portion_code = None
        self._portion_description = None
        self._sequence_number = None
        self._survey_flag = None
        self._unit = None
        self._input_food = None
        self._retention_factor = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if amount is not None:
            self.amount = amount
        if food_description is not None:
            self.food_description = food_description
        if ingredient_code is not None:
            self.ingredient_code = ingredient_code
        if ingredient_description is not None:
            self.ingredient_description = ingredient_description
        if ingredient_weight is not None:
            self.ingredient_weight = ingredient_weight
        if portion_code is not None:
            self.portion_code = portion_code
        if portion_description is not None:
            self.portion_description = portion_description
        if sequence_number is not None:
            self.sequence_number = sequence_number
        if survey_flag is not None:
            self.survey_flag = survey_flag
        if unit is not None:
            self.unit = unit
        if input_food is not None:
            self.input_food = input_food
        if retention_factor is not None:
            self.retention_factor = retention_factor

    @property
    def id(self):
        """Gets the id of this InputFoodSurvey.  # noqa: E501


        :return: The id of this InputFoodSurvey.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InputFoodSurvey.


        :param id: The id of this InputFoodSurvey.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def amount(self):
        """Gets the amount of this InputFoodSurvey.  # noqa: E501


        :return: The amount of this InputFoodSurvey.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this InputFoodSurvey.


        :param amount: The amount of this InputFoodSurvey.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def food_description(self):
        """Gets the food_description of this InputFoodSurvey.  # noqa: E501


        :return: The food_description of this InputFoodSurvey.  # noqa: E501
        :rtype: str
        """
        return self._food_description

    @food_description.setter
    def food_description(self, food_description):
        """Sets the food_description of this InputFoodSurvey.


        :param food_description: The food_description of this InputFoodSurvey.  # noqa: E501
        :type: str
        """

        self._food_description = food_description

    @property
    def ingredient_code(self):
        """Gets the ingredient_code of this InputFoodSurvey.  # noqa: E501


        :return: The ingredient_code of this InputFoodSurvey.  # noqa: E501
        :rtype: int
        """
        return self._ingredient_code

    @ingredient_code.setter
    def ingredient_code(self, ingredient_code):
        """Sets the ingredient_code of this InputFoodSurvey.


        :param ingredient_code: The ingredient_code of this InputFoodSurvey.  # noqa: E501
        :type: int
        """

        self._ingredient_code = ingredient_code

    @property
    def ingredient_description(self):
        """Gets the ingredient_description of this InputFoodSurvey.  # noqa: E501


        :return: The ingredient_description of this InputFoodSurvey.  # noqa: E501
        :rtype: str
        """
        return self._ingredient_description

    @ingredient_description.setter
    def ingredient_description(self, ingredient_description):
        """Sets the ingredient_description of this InputFoodSurvey.


        :param ingredient_description: The ingredient_description of this InputFoodSurvey.  # noqa: E501
        :type: str
        """

        self._ingredient_description = ingredient_description

    @property
    def ingredient_weight(self):
        """Gets the ingredient_weight of this InputFoodSurvey.  # noqa: E501


        :return: The ingredient_weight of this InputFoodSurvey.  # noqa: E501
        :rtype: float
        """
        return self._ingredient_weight

    @ingredient_weight.setter
    def ingredient_weight(self, ingredient_weight):
        """Sets the ingredient_weight of this InputFoodSurvey.


        :param ingredient_weight: The ingredient_weight of this InputFoodSurvey.  # noqa: E501
        :type: float
        """

        self._ingredient_weight = ingredient_weight

    @property
    def portion_code(self):
        """Gets the portion_code of this InputFoodSurvey.  # noqa: E501


        :return: The portion_code of this InputFoodSurvey.  # noqa: E501
        :rtype: str
        """
        return self._portion_code

    @portion_code.setter
    def portion_code(self, portion_code):
        """Sets the portion_code of this InputFoodSurvey.


        :param portion_code: The portion_code of this InputFoodSurvey.  # noqa: E501
        :type: str
        """

        self._portion_code = portion_code

    @property
    def portion_description(self):
        """Gets the portion_description of this InputFoodSurvey.  # noqa: E501


        :return: The portion_description of this InputFoodSurvey.  # noqa: E501
        :rtype: str
        """
        return self._portion_description

    @portion_description.setter
    def portion_description(self, portion_description):
        """Sets the portion_description of this InputFoodSurvey.


        :param portion_description: The portion_description of this InputFoodSurvey.  # noqa: E501
        :type: str
        """

        self._portion_description = portion_description

    @property
    def sequence_number(self):
        """Gets the sequence_number of this InputFoodSurvey.  # noqa: E501


        :return: The sequence_number of this InputFoodSurvey.  # noqa: E501
        :rtype: int
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this InputFoodSurvey.


        :param sequence_number: The sequence_number of this InputFoodSurvey.  # noqa: E501
        :type: int
        """

        self._sequence_number = sequence_number

    @property
    def survey_flag(self):
        """Gets the survey_flag of this InputFoodSurvey.  # noqa: E501


        :return: The survey_flag of this InputFoodSurvey.  # noqa: E501
        :rtype: int
        """
        return self._survey_flag

    @survey_flag.setter
    def survey_flag(self, survey_flag):
        """Sets the survey_flag of this InputFoodSurvey.


        :param survey_flag: The survey_flag of this InputFoodSurvey.  # noqa: E501
        :type: int
        """

        self._survey_flag = survey_flag

    @property
    def unit(self):
        """Gets the unit of this InputFoodSurvey.  # noqa: E501


        :return: The unit of this InputFoodSurvey.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this InputFoodSurvey.


        :param unit: The unit of this InputFoodSurvey.  # noqa: E501
        :type: str
        """

        self._unit = unit

    @property
    def input_food(self):
        """Gets the input_food of this InputFoodSurvey.  # noqa: E501


        :return: The input_food of this InputFoodSurvey.  # noqa: E501
        :rtype: SurveyFoodItem
        """
        return self._input_food

    @input_food.setter
    def input_food(self, input_food):
        """Sets the input_food of this InputFoodSurvey.


        :param input_food: The input_food of this InputFoodSurvey.  # noqa: E501
        :type: SurveyFoodItem
        """

        self._input_food = input_food

    @property
    def retention_factor(self):
        """Gets the retention_factor of this InputFoodSurvey.  # noqa: E501


        :return: The retention_factor of this InputFoodSurvey.  # noqa: E501
        :rtype: RetentionFactor
        """
        return self._retention_factor

    @retention_factor.setter
    def retention_factor(self, retention_factor):
        """Sets the retention_factor of this InputFoodSurvey.


        :param retention_factor: The retention_factor of this InputFoodSurvey.  # noqa: E501
        :type: RetentionFactor
        """

        self._retention_factor = retention_factor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InputFoodSurvey, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InputFoodSurvey):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
