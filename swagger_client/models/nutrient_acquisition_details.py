# coding: utf-8

"""
    Food Data Central API

    The FoodData Central API provides REST access to FoodData Central (FDC). It is intended primarily to assist application developers wishing to incorporate nutrient data into their applications or websites.   To take full advantage of the API, developers should familiarize themselves with the database by reading the database documentation available via links on [Data Type Documentation](https://fdc.nal.usda.gov/data-documentation.html). This documentation provides the detailed definitions and descriptions needed to understand the data elements referenced in the API documentation.      Additional details about the API including rate limits, access, and licensing are available on the [FDC website](https://fdc.nal.usda.gov/api-guide.html)  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NutrientAcquisitionDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sample_unit_id': 'int',
        'purchase_date': 'str',
        'store_city': 'str',
        'store_state': 'str'
    }

    attribute_map = {
        'sample_unit_id': 'sampleUnitId',
        'purchase_date': 'purchaseDate',
        'store_city': 'storeCity',
        'store_state': 'storeState'
    }

    def __init__(self, sample_unit_id=None, purchase_date=None, store_city=None, store_state=None):  # noqa: E501
        """NutrientAcquisitionDetails - a model defined in Swagger"""  # noqa: E501
        self._sample_unit_id = None
        self._purchase_date = None
        self._store_city = None
        self._store_state = None
        self.discriminator = None
        if sample_unit_id is not None:
            self.sample_unit_id = sample_unit_id
        if purchase_date is not None:
            self.purchase_date = purchase_date
        if store_city is not None:
            self.store_city = store_city
        if store_state is not None:
            self.store_state = store_state

    @property
    def sample_unit_id(self):
        """Gets the sample_unit_id of this NutrientAcquisitionDetails.  # noqa: E501


        :return: The sample_unit_id of this NutrientAcquisitionDetails.  # noqa: E501
        :rtype: int
        """
        return self._sample_unit_id

    @sample_unit_id.setter
    def sample_unit_id(self, sample_unit_id):
        """Sets the sample_unit_id of this NutrientAcquisitionDetails.


        :param sample_unit_id: The sample_unit_id of this NutrientAcquisitionDetails.  # noqa: E501
        :type: int
        """

        self._sample_unit_id = sample_unit_id

    @property
    def purchase_date(self):
        """Gets the purchase_date of this NutrientAcquisitionDetails.  # noqa: E501


        :return: The purchase_date of this NutrientAcquisitionDetails.  # noqa: E501
        :rtype: str
        """
        return self._purchase_date

    @purchase_date.setter
    def purchase_date(self, purchase_date):
        """Sets the purchase_date of this NutrientAcquisitionDetails.


        :param purchase_date: The purchase_date of this NutrientAcquisitionDetails.  # noqa: E501
        :type: str
        """

        self._purchase_date = purchase_date

    @property
    def store_city(self):
        """Gets the store_city of this NutrientAcquisitionDetails.  # noqa: E501


        :return: The store_city of this NutrientAcquisitionDetails.  # noqa: E501
        :rtype: str
        """
        return self._store_city

    @store_city.setter
    def store_city(self, store_city):
        """Sets the store_city of this NutrientAcquisitionDetails.


        :param store_city: The store_city of this NutrientAcquisitionDetails.  # noqa: E501
        :type: str
        """

        self._store_city = store_city

    @property
    def store_state(self):
        """Gets the store_state of this NutrientAcquisitionDetails.  # noqa: E501


        :return: The store_state of this NutrientAcquisitionDetails.  # noqa: E501
        :rtype: str
        """
        return self._store_state

    @store_state.setter
    def store_state(self, store_state):
        """Sets the store_state of this NutrientAcquisitionDetails.


        :param store_state: The store_state of this NutrientAcquisitionDetails.  # noqa: E501
        :type: str
        """

        self._store_state = store_state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NutrientAcquisitionDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NutrientAcquisitionDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
