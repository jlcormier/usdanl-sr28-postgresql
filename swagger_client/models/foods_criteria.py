# coding: utf-8

"""
    Food Data Central API

    The FoodData Central API provides REST access to FoodData Central (FDC). It is intended primarily to assist application developers wishing to incorporate nutrient data into their applications or websites.   To take full advantage of the API, developers should familiarize themselves with the database by reading the database documentation available via links on [Data Type Documentation](https://fdc.nal.usda.gov/data-documentation.html). This documentation provides the detailed definitions and descriptions needed to understand the data elements referenced in the API documentation.      Additional details about the API including rate limits, access, and licensing are available on the [FDC website](https://fdc.nal.usda.gov/api-guide.html)  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FoodsCriteria(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fdc_ids': 'list[int]',
        'format': 'str',
        'nutrients': 'list[int]'
    }

    attribute_map = {
        'fdc_ids': 'fdcIds',
        'format': 'format',
        'nutrients': 'nutrients'
    }

    def __init__(self, fdc_ids=None, format=None, nutrients=None):  # noqa: E501
        """FoodsCriteria - a model defined in Swagger"""  # noqa: E501
        self._fdc_ids = None
        self._format = None
        self._nutrients = None
        self.discriminator = None
        if fdc_ids is not None:
            self.fdc_ids = fdc_ids
        if format is not None:
            self.format = format
        if nutrients is not None:
            self.nutrients = nutrients

    @property
    def fdc_ids(self):
        """Gets the fdc_ids of this FoodsCriteria.  # noqa: E501

        List of multiple FDC ID's  # noqa: E501

        :return: The fdc_ids of this FoodsCriteria.  # noqa: E501
        :rtype: list[int]
        """
        return self._fdc_ids

    @fdc_ids.setter
    def fdc_ids(self, fdc_ids):
        """Sets the fdc_ids of this FoodsCriteria.

        List of multiple FDC ID's  # noqa: E501

        :param fdc_ids: The fdc_ids of this FoodsCriteria.  # noqa: E501
        :type: list[int]
        """

        self._fdc_ids = fdc_ids

    @property
    def format(self):
        """Gets the format of this FoodsCriteria.  # noqa: E501

        Optional. 'abridged' for an abridged set of elements, 'full' for all elements (default).  # noqa: E501

        :return: The format of this FoodsCriteria.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this FoodsCriteria.

        Optional. 'abridged' for an abridged set of elements, 'full' for all elements (default).  # noqa: E501

        :param format: The format of this FoodsCriteria.  # noqa: E501
        :type: str
        """
        allowed_values = ["abridged", "full"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"  # noqa: E501
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def nutrients(self):
        """Gets the nutrients of this FoodsCriteria.  # noqa: E501

        Optional. List of up to 25 nutrient numbers. Only the nutrient information for the specified nutrients will be returned.  If a food does not have any matching nutrients, the food will be returned with an empty foodNutrients element.  # noqa: E501

        :return: The nutrients of this FoodsCriteria.  # noqa: E501
        :rtype: list[int]
        """
        return self._nutrients

    @nutrients.setter
    def nutrients(self, nutrients):
        """Sets the nutrients of this FoodsCriteria.

        Optional. List of up to 25 nutrient numbers. Only the nutrient information for the specified nutrients will be returned.  If a food does not have any matching nutrients, the food will be returned with an empty foodNutrients element.  # noqa: E501

        :param nutrients: The nutrients of this FoodsCriteria.  # noqa: E501
        :type: list[int]
        """

        self._nutrients = nutrients

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FoodsCriteria, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FoodsCriteria):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
