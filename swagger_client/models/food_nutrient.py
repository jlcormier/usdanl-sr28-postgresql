# coding: utf-8

"""
    Food Data Central API

    The FoodData Central API provides REST access to FoodData Central (FDC). It is intended primarily to assist application developers wishing to incorporate nutrient data into their applications or websites.   To take full advantage of the API, developers should familiarize themselves with the database by reading the database documentation available via links on [Data Type Documentation](https://fdc.nal.usda.gov/data-documentation.html). This documentation provides the detailed definitions and descriptions needed to understand the data elements referenced in the API documentation.      Additional details about the API including rate limits, access, and licensing are available on the [FDC website](https://fdc.nal.usda.gov/api-guide.html)  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FoodNutrient(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'amount': 'float',
        'data_points': 'int',
        'min': 'float',
        'max': 'float',
        'median': 'float',
        'type': 'str',
        'nutrient': 'Nutrient',
        'food_nutrient_derivation': 'FoodNutrientDerivation',
        'nutrient_analysis_details': 'NutrientAnalysisDetails'
    }

    attribute_map = {
        'id': 'id',
        'amount': 'amount',
        'data_points': 'dataPoints',
        'min': 'min',
        'max': 'max',
        'median': 'median',
        'type': 'type',
        'nutrient': 'nutrient',
        'food_nutrient_derivation': 'foodNutrientDerivation',
        'nutrient_analysis_details': 'nutrientAnalysisDetails'
    }

    def __init__(self, id=None, amount=None, data_points=None, min=None, max=None, median=None, type=None, nutrient=None, food_nutrient_derivation=None, nutrient_analysis_details=None):  # noqa: E501
        """FoodNutrient - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._amount = None
        self._data_points = None
        self._min = None
        self._max = None
        self._median = None
        self._type = None
        self._nutrient = None
        self._food_nutrient_derivation = None
        self._nutrient_analysis_details = None
        self.discriminator = None
        self.id = id
        if amount is not None:
            self.amount = amount
        if data_points is not None:
            self.data_points = data_points
        if min is not None:
            self.min = min
        if max is not None:
            self.max = max
        if median is not None:
            self.median = median
        if type is not None:
            self.type = type
        if nutrient is not None:
            self.nutrient = nutrient
        if food_nutrient_derivation is not None:
            self.food_nutrient_derivation = food_nutrient_derivation
        if nutrient_analysis_details is not None:
            self.nutrient_analysis_details = nutrient_analysis_details

    @property
    def id(self):
        """Gets the id of this FoodNutrient.  # noqa: E501


        :return: The id of this FoodNutrient.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FoodNutrient.


        :param id: The id of this FoodNutrient.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def amount(self):
        """Gets the amount of this FoodNutrient.  # noqa: E501


        :return: The amount of this FoodNutrient.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this FoodNutrient.


        :param amount: The amount of this FoodNutrient.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def data_points(self):
        """Gets the data_points of this FoodNutrient.  # noqa: E501


        :return: The data_points of this FoodNutrient.  # noqa: E501
        :rtype: int
        """
        return self._data_points

    @data_points.setter
    def data_points(self, data_points):
        """Sets the data_points of this FoodNutrient.


        :param data_points: The data_points of this FoodNutrient.  # noqa: E501
        :type: int
        """

        self._data_points = data_points

    @property
    def min(self):
        """Gets the min of this FoodNutrient.  # noqa: E501


        :return: The min of this FoodNutrient.  # noqa: E501
        :rtype: float
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this FoodNutrient.


        :param min: The min of this FoodNutrient.  # noqa: E501
        :type: float
        """

        self._min = min

    @property
    def max(self):
        """Gets the max of this FoodNutrient.  # noqa: E501


        :return: The max of this FoodNutrient.  # noqa: E501
        :rtype: float
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this FoodNutrient.


        :param max: The max of this FoodNutrient.  # noqa: E501
        :type: float
        """

        self._max = max

    @property
    def median(self):
        """Gets the median of this FoodNutrient.  # noqa: E501


        :return: The median of this FoodNutrient.  # noqa: E501
        :rtype: float
        """
        return self._median

    @median.setter
    def median(self, median):
        """Sets the median of this FoodNutrient.


        :param median: The median of this FoodNutrient.  # noqa: E501
        :type: float
        """

        self._median = median

    @property
    def type(self):
        """Gets the type of this FoodNutrient.  # noqa: E501


        :return: The type of this FoodNutrient.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FoodNutrient.


        :param type: The type of this FoodNutrient.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def nutrient(self):
        """Gets the nutrient of this FoodNutrient.  # noqa: E501


        :return: The nutrient of this FoodNutrient.  # noqa: E501
        :rtype: Nutrient
        """
        return self._nutrient

    @nutrient.setter
    def nutrient(self, nutrient):
        """Sets the nutrient of this FoodNutrient.


        :param nutrient: The nutrient of this FoodNutrient.  # noqa: E501
        :type: Nutrient
        """

        self._nutrient = nutrient

    @property
    def food_nutrient_derivation(self):
        """Gets the food_nutrient_derivation of this FoodNutrient.  # noqa: E501


        :return: The food_nutrient_derivation of this FoodNutrient.  # noqa: E501
        :rtype: FoodNutrientDerivation
        """
        return self._food_nutrient_derivation

    @food_nutrient_derivation.setter
    def food_nutrient_derivation(self, food_nutrient_derivation):
        """Sets the food_nutrient_derivation of this FoodNutrient.


        :param food_nutrient_derivation: The food_nutrient_derivation of this FoodNutrient.  # noqa: E501
        :type: FoodNutrientDerivation
        """

        self._food_nutrient_derivation = food_nutrient_derivation

    @property
    def nutrient_analysis_details(self):
        """Gets the nutrient_analysis_details of this FoodNutrient.  # noqa: E501


        :return: The nutrient_analysis_details of this FoodNutrient.  # noqa: E501
        :rtype: NutrientAnalysisDetails
        """
        return self._nutrient_analysis_details

    @nutrient_analysis_details.setter
    def nutrient_analysis_details(self, nutrient_analysis_details):
        """Sets the nutrient_analysis_details of this FoodNutrient.


        :param nutrient_analysis_details: The nutrient_analysis_details of this FoodNutrient.  # noqa: E501
        :type: NutrientAnalysisDetails
        """

        self._nutrient_analysis_details = nutrient_analysis_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FoodNutrient, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FoodNutrient):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
