# coding: utf-8

"""
    Food Data Central API

    The FoodData Central API provides REST access to FoodData Central (FDC). It is intended primarily to assist application developers wishing to incorporate nutrient data into their applications or websites.   To take full advantage of the API, developers should familiarize themselves with the database by reading the database documentation available via links on [Data Type Documentation](https://fdc.nal.usda.gov/data-documentation.html). This documentation provides the detailed definitions and descriptions needed to understand the data elements referenced in the API documentation.      Additional details about the API including rate limits, access, and licensing are available on the [FDC website](https://fdc.nal.usda.gov/api-guide.html)  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NutrientAnalysisDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sub_sample_id': 'int',
        'amount': 'float',
        'nutrient_id': 'int',
        'lab_method_description': 'str',
        'lab_method_original_description': 'str',
        'lab_method_link': 'str',
        'lab_method_technique': 'str',
        'nutrient_acquisition_details': 'list[NutrientAcquisitionDetails]'
    }

    attribute_map = {
        'sub_sample_id': 'subSampleId',
        'amount': 'amount',
        'nutrient_id': 'nutrientId',
        'lab_method_description': 'labMethodDescription',
        'lab_method_original_description': 'labMethodOriginalDescription',
        'lab_method_link': 'labMethodLink',
        'lab_method_technique': 'labMethodTechnique',
        'nutrient_acquisition_details': 'nutrientAcquisitionDetails'
    }

    def __init__(self, sub_sample_id=None, amount=None, nutrient_id=None, lab_method_description=None, lab_method_original_description=None, lab_method_link=None, lab_method_technique=None, nutrient_acquisition_details=None):  # noqa: E501
        """NutrientAnalysisDetails - a model defined in Swagger"""  # noqa: E501
        self._sub_sample_id = None
        self._amount = None
        self._nutrient_id = None
        self._lab_method_description = None
        self._lab_method_original_description = None
        self._lab_method_link = None
        self._lab_method_technique = None
        self._nutrient_acquisition_details = None
        self.discriminator = None
        if sub_sample_id is not None:
            self.sub_sample_id = sub_sample_id
        if amount is not None:
            self.amount = amount
        if nutrient_id is not None:
            self.nutrient_id = nutrient_id
        if lab_method_description is not None:
            self.lab_method_description = lab_method_description
        if lab_method_original_description is not None:
            self.lab_method_original_description = lab_method_original_description
        if lab_method_link is not None:
            self.lab_method_link = lab_method_link
        if lab_method_technique is not None:
            self.lab_method_technique = lab_method_technique
        if nutrient_acquisition_details is not None:
            self.nutrient_acquisition_details = nutrient_acquisition_details

    @property
    def sub_sample_id(self):
        """Gets the sub_sample_id of this NutrientAnalysisDetails.  # noqa: E501


        :return: The sub_sample_id of this NutrientAnalysisDetails.  # noqa: E501
        :rtype: int
        """
        return self._sub_sample_id

    @sub_sample_id.setter
    def sub_sample_id(self, sub_sample_id):
        """Sets the sub_sample_id of this NutrientAnalysisDetails.


        :param sub_sample_id: The sub_sample_id of this NutrientAnalysisDetails.  # noqa: E501
        :type: int
        """

        self._sub_sample_id = sub_sample_id

    @property
    def amount(self):
        """Gets the amount of this NutrientAnalysisDetails.  # noqa: E501


        :return: The amount of this NutrientAnalysisDetails.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this NutrientAnalysisDetails.


        :param amount: The amount of this NutrientAnalysisDetails.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def nutrient_id(self):
        """Gets the nutrient_id of this NutrientAnalysisDetails.  # noqa: E501


        :return: The nutrient_id of this NutrientAnalysisDetails.  # noqa: E501
        :rtype: int
        """
        return self._nutrient_id

    @nutrient_id.setter
    def nutrient_id(self, nutrient_id):
        """Sets the nutrient_id of this NutrientAnalysisDetails.


        :param nutrient_id: The nutrient_id of this NutrientAnalysisDetails.  # noqa: E501
        :type: int
        """

        self._nutrient_id = nutrient_id

    @property
    def lab_method_description(self):
        """Gets the lab_method_description of this NutrientAnalysisDetails.  # noqa: E501


        :return: The lab_method_description of this NutrientAnalysisDetails.  # noqa: E501
        :rtype: str
        """
        return self._lab_method_description

    @lab_method_description.setter
    def lab_method_description(self, lab_method_description):
        """Sets the lab_method_description of this NutrientAnalysisDetails.


        :param lab_method_description: The lab_method_description of this NutrientAnalysisDetails.  # noqa: E501
        :type: str
        """

        self._lab_method_description = lab_method_description

    @property
    def lab_method_original_description(self):
        """Gets the lab_method_original_description of this NutrientAnalysisDetails.  # noqa: E501


        :return: The lab_method_original_description of this NutrientAnalysisDetails.  # noqa: E501
        :rtype: str
        """
        return self._lab_method_original_description

    @lab_method_original_description.setter
    def lab_method_original_description(self, lab_method_original_description):
        """Sets the lab_method_original_description of this NutrientAnalysisDetails.


        :param lab_method_original_description: The lab_method_original_description of this NutrientAnalysisDetails.  # noqa: E501
        :type: str
        """

        self._lab_method_original_description = lab_method_original_description

    @property
    def lab_method_link(self):
        """Gets the lab_method_link of this NutrientAnalysisDetails.  # noqa: E501


        :return: The lab_method_link of this NutrientAnalysisDetails.  # noqa: E501
        :rtype: str
        """
        return self._lab_method_link

    @lab_method_link.setter
    def lab_method_link(self, lab_method_link):
        """Sets the lab_method_link of this NutrientAnalysisDetails.


        :param lab_method_link: The lab_method_link of this NutrientAnalysisDetails.  # noqa: E501
        :type: str
        """

        self._lab_method_link = lab_method_link

    @property
    def lab_method_technique(self):
        """Gets the lab_method_technique of this NutrientAnalysisDetails.  # noqa: E501


        :return: The lab_method_technique of this NutrientAnalysisDetails.  # noqa: E501
        :rtype: str
        """
        return self._lab_method_technique

    @lab_method_technique.setter
    def lab_method_technique(self, lab_method_technique):
        """Sets the lab_method_technique of this NutrientAnalysisDetails.


        :param lab_method_technique: The lab_method_technique of this NutrientAnalysisDetails.  # noqa: E501
        :type: str
        """

        self._lab_method_technique = lab_method_technique

    @property
    def nutrient_acquisition_details(self):
        """Gets the nutrient_acquisition_details of this NutrientAnalysisDetails.  # noqa: E501


        :return: The nutrient_acquisition_details of this NutrientAnalysisDetails.  # noqa: E501
        :rtype: list[NutrientAcquisitionDetails]
        """
        return self._nutrient_acquisition_details

    @nutrient_acquisition_details.setter
    def nutrient_acquisition_details(self, nutrient_acquisition_details):
        """Sets the nutrient_acquisition_details of this NutrientAnalysisDetails.


        :param nutrient_acquisition_details: The nutrient_acquisition_details of this NutrientAnalysisDetails.  # noqa: E501
        :type: list[NutrientAcquisitionDetails]
        """

        self._nutrient_acquisition_details = nutrient_acquisition_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NutrientAnalysisDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NutrientAnalysisDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
