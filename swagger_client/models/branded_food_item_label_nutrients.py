# coding: utf-8

"""
    Food Data Central API

    The FoodData Central API provides REST access to FoodData Central (FDC). It is intended primarily to assist application developers wishing to incorporate nutrient data into their applications or websites.   To take full advantage of the API, developers should familiarize themselves with the database by reading the database documentation available via links on [Data Type Documentation](https://fdc.nal.usda.gov/data-documentation.html). This documentation provides the detailed definitions and descriptions needed to understand the data elements referenced in the API documentation.      Additional details about the API including rate limits, access, and licensing are available on the [FDC website](https://fdc.nal.usda.gov/api-guide.html)  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BrandedFoodItemLabelNutrients(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fat': 'BrandedFoodItemLabelNutrientsFat',
        'saturated_fat': 'BrandedFoodItemLabelNutrientsSaturatedFat',
        'trans_fat': 'BrandedFoodItemLabelNutrientsTransFat',
        'cholesterol': 'BrandedFoodItemLabelNutrientsTransFat',
        'sodium': 'BrandedFoodItemLabelNutrientsTransFat',
        'carbohydrates': 'BrandedFoodItemLabelNutrientsCarbohydrates',
        'fiber': 'BrandedFoodItemLabelNutrientsFiber',
        'sugars': 'BrandedFoodItemLabelNutrientsSugars',
        'protein': 'BrandedFoodItemLabelNutrientsProtein',
        'calcium': 'BrandedFoodItemLabelNutrientsCalcium',
        'iron': 'BrandedFoodItemLabelNutrientsIron',
        'potassium': 'BrandedFoodItemLabelNutrientsPotassium',
        'calories': 'BrandedFoodItemLabelNutrientsCalories'
    }

    attribute_map = {
        'fat': 'fat',
        'saturated_fat': 'saturatedFat',
        'trans_fat': 'transFat',
        'cholesterol': 'cholesterol',
        'sodium': 'sodium',
        'carbohydrates': 'carbohydrates',
        'fiber': 'fiber',
        'sugars': 'sugars',
        'protein': 'protein',
        'calcium': 'calcium',
        'iron': 'iron',
        'potassium': 'potassium',
        'calories': 'calories'
    }

    def __init__(self, fat=None, saturated_fat=None, trans_fat=None, cholesterol=None, sodium=None, carbohydrates=None, fiber=None, sugars=None, protein=None, calcium=None, iron=None, potassium=None, calories=None):  # noqa: E501
        """BrandedFoodItemLabelNutrients - a model defined in Swagger"""  # noqa: E501
        self._fat = None
        self._saturated_fat = None
        self._trans_fat = None
        self._cholesterol = None
        self._sodium = None
        self._carbohydrates = None
        self._fiber = None
        self._sugars = None
        self._protein = None
        self._calcium = None
        self._iron = None
        self._potassium = None
        self._calories = None
        self.discriminator = None
        if fat is not None:
            self.fat = fat
        if saturated_fat is not None:
            self.saturated_fat = saturated_fat
        if trans_fat is not None:
            self.trans_fat = trans_fat
        if cholesterol is not None:
            self.cholesterol = cholesterol
        if sodium is not None:
            self.sodium = sodium
        if carbohydrates is not None:
            self.carbohydrates = carbohydrates
        if fiber is not None:
            self.fiber = fiber
        if sugars is not None:
            self.sugars = sugars
        if protein is not None:
            self.protein = protein
        if calcium is not None:
            self.calcium = calcium
        if iron is not None:
            self.iron = iron
        if potassium is not None:
            self.potassium = potassium
        if calories is not None:
            self.calories = calories

    @property
    def fat(self):
        """Gets the fat of this BrandedFoodItemLabelNutrients.  # noqa: E501


        :return: The fat of this BrandedFoodItemLabelNutrients.  # noqa: E501
        :rtype: BrandedFoodItemLabelNutrientsFat
        """
        return self._fat

    @fat.setter
    def fat(self, fat):
        """Sets the fat of this BrandedFoodItemLabelNutrients.


        :param fat: The fat of this BrandedFoodItemLabelNutrients.  # noqa: E501
        :type: BrandedFoodItemLabelNutrientsFat
        """

        self._fat = fat

    @property
    def saturated_fat(self):
        """Gets the saturated_fat of this BrandedFoodItemLabelNutrients.  # noqa: E501


        :return: The saturated_fat of this BrandedFoodItemLabelNutrients.  # noqa: E501
        :rtype: BrandedFoodItemLabelNutrientsSaturatedFat
        """
        return self._saturated_fat

    @saturated_fat.setter
    def saturated_fat(self, saturated_fat):
        """Sets the saturated_fat of this BrandedFoodItemLabelNutrients.


        :param saturated_fat: The saturated_fat of this BrandedFoodItemLabelNutrients.  # noqa: E501
        :type: BrandedFoodItemLabelNutrientsSaturatedFat
        """

        self._saturated_fat = saturated_fat

    @property
    def trans_fat(self):
        """Gets the trans_fat of this BrandedFoodItemLabelNutrients.  # noqa: E501


        :return: The trans_fat of this BrandedFoodItemLabelNutrients.  # noqa: E501
        :rtype: BrandedFoodItemLabelNutrientsTransFat
        """
        return self._trans_fat

    @trans_fat.setter
    def trans_fat(self, trans_fat):
        """Sets the trans_fat of this BrandedFoodItemLabelNutrients.


        :param trans_fat: The trans_fat of this BrandedFoodItemLabelNutrients.  # noqa: E501
        :type: BrandedFoodItemLabelNutrientsTransFat
        """

        self._trans_fat = trans_fat

    @property
    def cholesterol(self):
        """Gets the cholesterol of this BrandedFoodItemLabelNutrients.  # noqa: E501


        :return: The cholesterol of this BrandedFoodItemLabelNutrients.  # noqa: E501
        :rtype: BrandedFoodItemLabelNutrientsTransFat
        """
        return self._cholesterol

    @cholesterol.setter
    def cholesterol(self, cholesterol):
        """Sets the cholesterol of this BrandedFoodItemLabelNutrients.


        :param cholesterol: The cholesterol of this BrandedFoodItemLabelNutrients.  # noqa: E501
        :type: BrandedFoodItemLabelNutrientsTransFat
        """

        self._cholesterol = cholesterol

    @property
    def sodium(self):
        """Gets the sodium of this BrandedFoodItemLabelNutrients.  # noqa: E501


        :return: The sodium of this BrandedFoodItemLabelNutrients.  # noqa: E501
        :rtype: BrandedFoodItemLabelNutrientsTransFat
        """
        return self._sodium

    @sodium.setter
    def sodium(self, sodium):
        """Sets the sodium of this BrandedFoodItemLabelNutrients.


        :param sodium: The sodium of this BrandedFoodItemLabelNutrients.  # noqa: E501
        :type: BrandedFoodItemLabelNutrientsTransFat
        """

        self._sodium = sodium

    @property
    def carbohydrates(self):
        """Gets the carbohydrates of this BrandedFoodItemLabelNutrients.  # noqa: E501


        :return: The carbohydrates of this BrandedFoodItemLabelNutrients.  # noqa: E501
        :rtype: BrandedFoodItemLabelNutrientsCarbohydrates
        """
        return self._carbohydrates

    @carbohydrates.setter
    def carbohydrates(self, carbohydrates):
        """Sets the carbohydrates of this BrandedFoodItemLabelNutrients.


        :param carbohydrates: The carbohydrates of this BrandedFoodItemLabelNutrients.  # noqa: E501
        :type: BrandedFoodItemLabelNutrientsCarbohydrates
        """

        self._carbohydrates = carbohydrates

    @property
    def fiber(self):
        """Gets the fiber of this BrandedFoodItemLabelNutrients.  # noqa: E501


        :return: The fiber of this BrandedFoodItemLabelNutrients.  # noqa: E501
        :rtype: BrandedFoodItemLabelNutrientsFiber
        """
        return self._fiber

    @fiber.setter
    def fiber(self, fiber):
        """Sets the fiber of this BrandedFoodItemLabelNutrients.


        :param fiber: The fiber of this BrandedFoodItemLabelNutrients.  # noqa: E501
        :type: BrandedFoodItemLabelNutrientsFiber
        """

        self._fiber = fiber

    @property
    def sugars(self):
        """Gets the sugars of this BrandedFoodItemLabelNutrients.  # noqa: E501


        :return: The sugars of this BrandedFoodItemLabelNutrients.  # noqa: E501
        :rtype: BrandedFoodItemLabelNutrientsSugars
        """
        return self._sugars

    @sugars.setter
    def sugars(self, sugars):
        """Sets the sugars of this BrandedFoodItemLabelNutrients.


        :param sugars: The sugars of this BrandedFoodItemLabelNutrients.  # noqa: E501
        :type: BrandedFoodItemLabelNutrientsSugars
        """

        self._sugars = sugars

    @property
    def protein(self):
        """Gets the protein of this BrandedFoodItemLabelNutrients.  # noqa: E501


        :return: The protein of this BrandedFoodItemLabelNutrients.  # noqa: E501
        :rtype: BrandedFoodItemLabelNutrientsProtein
        """
        return self._protein

    @protein.setter
    def protein(self, protein):
        """Sets the protein of this BrandedFoodItemLabelNutrients.


        :param protein: The protein of this BrandedFoodItemLabelNutrients.  # noqa: E501
        :type: BrandedFoodItemLabelNutrientsProtein
        """

        self._protein = protein

    @property
    def calcium(self):
        """Gets the calcium of this BrandedFoodItemLabelNutrients.  # noqa: E501


        :return: The calcium of this BrandedFoodItemLabelNutrients.  # noqa: E501
        :rtype: BrandedFoodItemLabelNutrientsCalcium
        """
        return self._calcium

    @calcium.setter
    def calcium(self, calcium):
        """Sets the calcium of this BrandedFoodItemLabelNutrients.


        :param calcium: The calcium of this BrandedFoodItemLabelNutrients.  # noqa: E501
        :type: BrandedFoodItemLabelNutrientsCalcium
        """

        self._calcium = calcium

    @property
    def iron(self):
        """Gets the iron of this BrandedFoodItemLabelNutrients.  # noqa: E501


        :return: The iron of this BrandedFoodItemLabelNutrients.  # noqa: E501
        :rtype: BrandedFoodItemLabelNutrientsIron
        """
        return self._iron

    @iron.setter
    def iron(self, iron):
        """Sets the iron of this BrandedFoodItemLabelNutrients.


        :param iron: The iron of this BrandedFoodItemLabelNutrients.  # noqa: E501
        :type: BrandedFoodItemLabelNutrientsIron
        """

        self._iron = iron

    @property
    def potassium(self):
        """Gets the potassium of this BrandedFoodItemLabelNutrients.  # noqa: E501


        :return: The potassium of this BrandedFoodItemLabelNutrients.  # noqa: E501
        :rtype: BrandedFoodItemLabelNutrientsPotassium
        """
        return self._potassium

    @potassium.setter
    def potassium(self, potassium):
        """Sets the potassium of this BrandedFoodItemLabelNutrients.


        :param potassium: The potassium of this BrandedFoodItemLabelNutrients.  # noqa: E501
        :type: BrandedFoodItemLabelNutrientsPotassium
        """

        self._potassium = potassium

    @property
    def calories(self):
        """Gets the calories of this BrandedFoodItemLabelNutrients.  # noqa: E501


        :return: The calories of this BrandedFoodItemLabelNutrients.  # noqa: E501
        :rtype: BrandedFoodItemLabelNutrientsCalories
        """
        return self._calories

    @calories.setter
    def calories(self, calories):
        """Sets the calories of this BrandedFoodItemLabelNutrients.


        :param calories: The calories of this BrandedFoodItemLabelNutrients.  # noqa: E501
        :type: BrandedFoodItemLabelNutrientsCalories
        """

        self._calories = calories

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BrandedFoodItemLabelNutrients, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BrandedFoodItemLabelNutrients):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
