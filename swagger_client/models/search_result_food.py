# coding: utf-8

"""
    Food Data Central API

    The FoodData Central API provides REST access to FoodData Central (FDC). It is intended primarily to assist application developers wishing to incorporate nutrient data into their applications or websites.   To take full advantage of the API, developers should familiarize themselves with the database by reading the database documentation available via links on [Data Type Documentation](https://fdc.nal.usda.gov/data-documentation.html). This documentation provides the detailed definitions and descriptions needed to understand the data elements referenced in the API documentation.      Additional details about the API including rate limits, access, and licensing are available on the [FDC website](https://fdc.nal.usda.gov/api-guide.html)  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SearchResultFood(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fdc_id': 'int',
        'data_type': 'str',
        'description': 'str',
        'food_code': 'str',
        'food_nutrients': 'list[AbridgedFoodNutrient]',
        'publication_date': 'str',
        'scientific_name': 'str',
        'brand_owner': 'str',
        'gtin_upc': 'str',
        'ingredients': 'str',
        'ndb_number': 'int',
        'additional_descriptions': 'str',
        'all_highlight_fields': 'str',
        'score': 'float'
    }

    attribute_map = {
        'fdc_id': 'fdcId',
        'data_type': 'dataType',
        'description': 'description',
        'food_code': 'foodCode',
        'food_nutrients': 'foodNutrients',
        'publication_date': 'publicationDate',
        'scientific_name': 'scientificName',
        'brand_owner': 'brandOwner',
        'gtin_upc': 'gtinUpc',
        'ingredients': 'ingredients',
        'ndb_number': 'ndbNumber',
        'additional_descriptions': 'additionalDescriptions',
        'all_highlight_fields': 'allHighlightFields',
        'score': 'score'
    }

    def __init__(self, fdc_id=None, data_type=None, description=None, food_code=None, food_nutrients=None, publication_date=None, scientific_name=None, brand_owner=None, gtin_upc=None, ingredients=None, ndb_number=None, additional_descriptions=None, all_highlight_fields=None, score=None):  # noqa: E501
        """SearchResultFood - a model defined in Swagger"""  # noqa: E501
        self._fdc_id = None
        self._data_type = None
        self._description = None
        self._food_code = None
        self._food_nutrients = None
        self._publication_date = None
        self._scientific_name = None
        self._brand_owner = None
        self._gtin_upc = None
        self._ingredients = None
        self._ndb_number = None
        self._additional_descriptions = None
        self._all_highlight_fields = None
        self._score = None
        self.discriminator = None
        self.fdc_id = fdc_id
        if data_type is not None:
            self.data_type = data_type
        self.description = description
        if food_code is not None:
            self.food_code = food_code
        if food_nutrients is not None:
            self.food_nutrients = food_nutrients
        if publication_date is not None:
            self.publication_date = publication_date
        if scientific_name is not None:
            self.scientific_name = scientific_name
        if brand_owner is not None:
            self.brand_owner = brand_owner
        if gtin_upc is not None:
            self.gtin_upc = gtin_upc
        if ingredients is not None:
            self.ingredients = ingredients
        if ndb_number is not None:
            self.ndb_number = ndb_number
        if additional_descriptions is not None:
            self.additional_descriptions = additional_descriptions
        if all_highlight_fields is not None:
            self.all_highlight_fields = all_highlight_fields
        if score is not None:
            self.score = score

    @property
    def fdc_id(self):
        """Gets the fdc_id of this SearchResultFood.  # noqa: E501

        Unique ID of the food.  # noqa: E501

        :return: The fdc_id of this SearchResultFood.  # noqa: E501
        :rtype: int
        """
        return self._fdc_id

    @fdc_id.setter
    def fdc_id(self, fdc_id):
        """Sets the fdc_id of this SearchResultFood.

        Unique ID of the food.  # noqa: E501

        :param fdc_id: The fdc_id of this SearchResultFood.  # noqa: E501
        :type: int
        """
        if fdc_id is None:
            raise ValueError("Invalid value for `fdc_id`, must not be `None`")  # noqa: E501

        self._fdc_id = fdc_id

    @property
    def data_type(self):
        """Gets the data_type of this SearchResultFood.  # noqa: E501

        The type of the food data.  # noqa: E501

        :return: The data_type of this SearchResultFood.  # noqa: E501
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this SearchResultFood.

        The type of the food data.  # noqa: E501

        :param data_type: The data_type of this SearchResultFood.  # noqa: E501
        :type: str
        """

        self._data_type = data_type

    @property
    def description(self):
        """Gets the description of this SearchResultFood.  # noqa: E501

        The description of the food.  # noqa: E501

        :return: The description of this SearchResultFood.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SearchResultFood.

        The description of the food.  # noqa: E501

        :param description: The description of this SearchResultFood.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def food_code(self):
        """Gets the food_code of this SearchResultFood.  # noqa: E501

        Any A unique ID identifying the food within FNDDS.  # noqa: E501

        :return: The food_code of this SearchResultFood.  # noqa: E501
        :rtype: str
        """
        return self._food_code

    @food_code.setter
    def food_code(self, food_code):
        """Sets the food_code of this SearchResultFood.

        Any A unique ID identifying the food within FNDDS.  # noqa: E501

        :param food_code: The food_code of this SearchResultFood.  # noqa: E501
        :type: str
        """

        self._food_code = food_code

    @property
    def food_nutrients(self):
        """Gets the food_nutrients of this SearchResultFood.  # noqa: E501


        :return: The food_nutrients of this SearchResultFood.  # noqa: E501
        :rtype: list[AbridgedFoodNutrient]
        """
        return self._food_nutrients

    @food_nutrients.setter
    def food_nutrients(self, food_nutrients):
        """Sets the food_nutrients of this SearchResultFood.


        :param food_nutrients: The food_nutrients of this SearchResultFood.  # noqa: E501
        :type: list[AbridgedFoodNutrient]
        """

        self._food_nutrients = food_nutrients

    @property
    def publication_date(self):
        """Gets the publication_date of this SearchResultFood.  # noqa: E501

        Date the item was published to FDC.  # noqa: E501

        :return: The publication_date of this SearchResultFood.  # noqa: E501
        :rtype: str
        """
        return self._publication_date

    @publication_date.setter
    def publication_date(self, publication_date):
        """Sets the publication_date of this SearchResultFood.

        Date the item was published to FDC.  # noqa: E501

        :param publication_date: The publication_date of this SearchResultFood.  # noqa: E501
        :type: str
        """

        self._publication_date = publication_date

    @property
    def scientific_name(self):
        """Gets the scientific_name of this SearchResultFood.  # noqa: E501

        The scientific name of the food.  # noqa: E501

        :return: The scientific_name of this SearchResultFood.  # noqa: E501
        :rtype: str
        """
        return self._scientific_name

    @scientific_name.setter
    def scientific_name(self, scientific_name):
        """Sets the scientific_name of this SearchResultFood.

        The scientific name of the food.  # noqa: E501

        :param scientific_name: The scientific_name of this SearchResultFood.  # noqa: E501
        :type: str
        """

        self._scientific_name = scientific_name

    @property
    def brand_owner(self):
        """Gets the brand_owner of this SearchResultFood.  # noqa: E501

        Brand owner for the food. Only applies to Branded Foods.  # noqa: E501

        :return: The brand_owner of this SearchResultFood.  # noqa: E501
        :rtype: str
        """
        return self._brand_owner

    @brand_owner.setter
    def brand_owner(self, brand_owner):
        """Sets the brand_owner of this SearchResultFood.

        Brand owner for the food. Only applies to Branded Foods.  # noqa: E501

        :param brand_owner: The brand_owner of this SearchResultFood.  # noqa: E501
        :type: str
        """

        self._brand_owner = brand_owner

    @property
    def gtin_upc(self):
        """Gets the gtin_upc of this SearchResultFood.  # noqa: E501

        GTIN or UPC code identifying the food. Only applies to Branded Foods.  # noqa: E501

        :return: The gtin_upc of this SearchResultFood.  # noqa: E501
        :rtype: str
        """
        return self._gtin_upc

    @gtin_upc.setter
    def gtin_upc(self, gtin_upc):
        """Sets the gtin_upc of this SearchResultFood.

        GTIN or UPC code identifying the food. Only applies to Branded Foods.  # noqa: E501

        :param gtin_upc: The gtin_upc of this SearchResultFood.  # noqa: E501
        :type: str
        """

        self._gtin_upc = gtin_upc

    @property
    def ingredients(self):
        """Gets the ingredients of this SearchResultFood.  # noqa: E501

        The list of ingredients (as it appears on the product label). Only applies to Branded Foods.  # noqa: E501

        :return: The ingredients of this SearchResultFood.  # noqa: E501
        :rtype: str
        """
        return self._ingredients

    @ingredients.setter
    def ingredients(self, ingredients):
        """Sets the ingredients of this SearchResultFood.

        The list of ingredients (as it appears on the product label). Only applies to Branded Foods.  # noqa: E501

        :param ingredients: The ingredients of this SearchResultFood.  # noqa: E501
        :type: str
        """

        self._ingredients = ingredients

    @property
    def ndb_number(self):
        """Gets the ndb_number of this SearchResultFood.  # noqa: E501

        Unique number assigned for foundation foods. Only applies to Foundation and SRLegacy Foods.  # noqa: E501

        :return: The ndb_number of this SearchResultFood.  # noqa: E501
        :rtype: int
        """
        return self._ndb_number

    @ndb_number.setter
    def ndb_number(self, ndb_number):
        """Sets the ndb_number of this SearchResultFood.

        Unique number assigned for foundation foods. Only applies to Foundation and SRLegacy Foods.  # noqa: E501

        :param ndb_number: The ndb_number of this SearchResultFood.  # noqa: E501
        :type: int
        """

        self._ndb_number = ndb_number

    @property
    def additional_descriptions(self):
        """Gets the additional_descriptions of this SearchResultFood.  # noqa: E501

        Any additional descriptions of the food.  # noqa: E501

        :return: The additional_descriptions of this SearchResultFood.  # noqa: E501
        :rtype: str
        """
        return self._additional_descriptions

    @additional_descriptions.setter
    def additional_descriptions(self, additional_descriptions):
        """Sets the additional_descriptions of this SearchResultFood.

        Any additional descriptions of the food.  # noqa: E501

        :param additional_descriptions: The additional_descriptions of this SearchResultFood.  # noqa: E501
        :type: str
        """

        self._additional_descriptions = additional_descriptions

    @property
    def all_highlight_fields(self):
        """Gets the all_highlight_fields of this SearchResultFood.  # noqa: E501

        allHighlightFields  # noqa: E501

        :return: The all_highlight_fields of this SearchResultFood.  # noqa: E501
        :rtype: str
        """
        return self._all_highlight_fields

    @all_highlight_fields.setter
    def all_highlight_fields(self, all_highlight_fields):
        """Sets the all_highlight_fields of this SearchResultFood.

        allHighlightFields  # noqa: E501

        :param all_highlight_fields: The all_highlight_fields of this SearchResultFood.  # noqa: E501
        :type: str
        """

        self._all_highlight_fields = all_highlight_fields

    @property
    def score(self):
        """Gets the score of this SearchResultFood.  # noqa: E501

        Relative score indicating how well the food matches the search criteria.  # noqa: E501

        :return: The score of this SearchResultFood.  # noqa: E501
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this SearchResultFood.

        Relative score indicating how well the food matches the search criteria.  # noqa: E501

        :param score: The score of this SearchResultFood.  # noqa: E501
        :type: float
        """

        self._score = score

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SearchResultFood, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchResultFood):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
