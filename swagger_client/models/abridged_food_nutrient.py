# coding: utf-8

"""
    Food Data Central API

    The FoodData Central API provides REST access to FoodData Central (FDC). It is intended primarily to assist application developers wishing to incorporate nutrient data into their applications or websites.   To take full advantage of the API, developers should familiarize themselves with the database by reading the database documentation available via links on [Data Type Documentation](https://fdc.nal.usda.gov/data-documentation.html). This documentation provides the detailed definitions and descriptions needed to understand the data elements referenced in the API documentation.      Additional details about the API including rate limits, access, and licensing are available on the [FDC website](https://fdc.nal.usda.gov/api-guide.html)  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AbridgedFoodNutrient(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'number': 'int',
        'name': 'str',
        'amount': 'float',
        'unit_name': 'str',
        'derivation_code': 'str',
        'derivation_description': 'str'
    }

    attribute_map = {
        'number': 'number',
        'name': 'name',
        'amount': 'amount',
        'unit_name': 'unitName',
        'derivation_code': 'derivationCode',
        'derivation_description': 'derivationDescription'
    }

    def __init__(self, number=None, name=None, amount=None, unit_name=None, derivation_code=None, derivation_description=None):  # noqa: E501
        """AbridgedFoodNutrient - a model defined in Swagger"""  # noqa: E501
        self._number = None
        self._name = None
        self._amount = None
        self._unit_name = None
        self._derivation_code = None
        self._derivation_description = None
        self.discriminator = None
        if number is not None:
            self.number = number
        if name is not None:
            self.name = name
        if amount is not None:
            self.amount = amount
        if unit_name is not None:
            self.unit_name = unit_name
        if derivation_code is not None:
            self.derivation_code = derivation_code
        if derivation_description is not None:
            self.derivation_description = derivation_description

    @property
    def number(self):
        """Gets the number of this AbridgedFoodNutrient.  # noqa: E501


        :return: The number of this AbridgedFoodNutrient.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this AbridgedFoodNutrient.


        :param number: The number of this AbridgedFoodNutrient.  # noqa: E501
        :type: int
        """

        self._number = number

    @property
    def name(self):
        """Gets the name of this AbridgedFoodNutrient.  # noqa: E501


        :return: The name of this AbridgedFoodNutrient.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AbridgedFoodNutrient.


        :param name: The name of this AbridgedFoodNutrient.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def amount(self):
        """Gets the amount of this AbridgedFoodNutrient.  # noqa: E501


        :return: The amount of this AbridgedFoodNutrient.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this AbridgedFoodNutrient.


        :param amount: The amount of this AbridgedFoodNutrient.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def unit_name(self):
        """Gets the unit_name of this AbridgedFoodNutrient.  # noqa: E501


        :return: The unit_name of this AbridgedFoodNutrient.  # noqa: E501
        :rtype: str
        """
        return self._unit_name

    @unit_name.setter
    def unit_name(self, unit_name):
        """Sets the unit_name of this AbridgedFoodNutrient.


        :param unit_name: The unit_name of this AbridgedFoodNutrient.  # noqa: E501
        :type: str
        """

        self._unit_name = unit_name

    @property
    def derivation_code(self):
        """Gets the derivation_code of this AbridgedFoodNutrient.  # noqa: E501


        :return: The derivation_code of this AbridgedFoodNutrient.  # noqa: E501
        :rtype: str
        """
        return self._derivation_code

    @derivation_code.setter
    def derivation_code(self, derivation_code):
        """Sets the derivation_code of this AbridgedFoodNutrient.


        :param derivation_code: The derivation_code of this AbridgedFoodNutrient.  # noqa: E501
        :type: str
        """

        self._derivation_code = derivation_code

    @property
    def derivation_description(self):
        """Gets the derivation_description of this AbridgedFoodNutrient.  # noqa: E501


        :return: The derivation_description of this AbridgedFoodNutrient.  # noqa: E501
        :rtype: str
        """
        return self._derivation_description

    @derivation_description.setter
    def derivation_description(self, derivation_description):
        """Sets the derivation_description of this AbridgedFoodNutrient.


        :param derivation_description: The derivation_description of this AbridgedFoodNutrient.  # noqa: E501
        :type: str
        """

        self._derivation_description = derivation_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AbridgedFoodNutrient, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AbridgedFoodNutrient):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
