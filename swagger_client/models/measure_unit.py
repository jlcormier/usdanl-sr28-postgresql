# coding: utf-8

"""
    Food Data Central API

    The FoodData Central API provides REST access to FoodData Central (FDC). It is intended primarily to assist application developers wishing to incorporate nutrient data into their applications or websites.   To take full advantage of the API, developers should familiarize themselves with the database by reading the database documentation available via links on [Data Type Documentation](https://fdc.nal.usda.gov/data-documentation.html). This documentation provides the detailed definitions and descriptions needed to understand the data elements referenced in the API documentation.      Additional details about the API including rate limits, access, and licensing are available on the [FDC website](https://fdc.nal.usda.gov/api-guide.html)  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MeasureUnit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'abbreviation': 'str',
        'name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'abbreviation': 'abbreviation',
        'name': 'name'
    }

    def __init__(self, id=None, abbreviation=None, name=None):  # noqa: E501
        """MeasureUnit - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._abbreviation = None
        self._name = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if abbreviation is not None:
            self.abbreviation = abbreviation
        if name is not None:
            self.name = name

    @property
    def id(self):
        """Gets the id of this MeasureUnit.  # noqa: E501


        :return: The id of this MeasureUnit.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MeasureUnit.


        :param id: The id of this MeasureUnit.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def abbreviation(self):
        """Gets the abbreviation of this MeasureUnit.  # noqa: E501


        :return: The abbreviation of this MeasureUnit.  # noqa: E501
        :rtype: str
        """
        return self._abbreviation

    @abbreviation.setter
    def abbreviation(self, abbreviation):
        """Sets the abbreviation of this MeasureUnit.


        :param abbreviation: The abbreviation of this MeasureUnit.  # noqa: E501
        :type: str
        """

        self._abbreviation = abbreviation

    @property
    def name(self):
        """Gets the name of this MeasureUnit.  # noqa: E501


        :return: The name of this MeasureUnit.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MeasureUnit.


        :param name: The name of this MeasureUnit.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MeasureUnit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MeasureUnit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
