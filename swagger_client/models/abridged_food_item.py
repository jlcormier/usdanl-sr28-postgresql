# coding: utf-8

"""
    Food Data Central API

    The FoodData Central API provides REST access to FoodData Central (FDC). It is intended primarily to assist application developers wishing to incorporate nutrient data into their applications or websites.   To take full advantage of the API, developers should familiarize themselves with the database by reading the database documentation available via links on [Data Type Documentation](https://fdc.nal.usda.gov/data-documentation.html). This documentation provides the detailed definitions and descriptions needed to understand the data elements referenced in the API documentation.      Additional details about the API including rate limits, access, and licensing are available on the [FDC website](https://fdc.nal.usda.gov/api-guide.html)  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AbridgedFoodItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_type': 'str',
        'description': 'str',
        'fdc_id': 'int',
        'food_nutrients': 'list[AbridgedFoodNutrient]',
        'publication_date': 'str',
        'brand_owner': 'str',
        'gtin_upc': 'str',
        'ndb_number': 'int',
        'food_code': 'str'
    }

    attribute_map = {
        'data_type': 'dataType',
        'description': 'description',
        'fdc_id': 'fdcId',
        'food_nutrients': 'foodNutrients',
        'publication_date': 'publicationDate',
        'brand_owner': 'brandOwner',
        'gtin_upc': 'gtinUpc',
        'ndb_number': 'ndbNumber',
        'food_code': 'foodCode'
    }

    def __init__(self, data_type=None, description=None, fdc_id=None, food_nutrients=None, publication_date=None, brand_owner=None, gtin_upc=None, ndb_number=None, food_code=None):  # noqa: E501
        """AbridgedFoodItem - a model defined in Swagger"""  # noqa: E501
        self._data_type = None
        self._description = None
        self._fdc_id = None
        self._food_nutrients = None
        self._publication_date = None
        self._brand_owner = None
        self._gtin_upc = None
        self._ndb_number = None
        self._food_code = None
        self.discriminator = None
        self.data_type = data_type
        self.description = description
        self.fdc_id = fdc_id
        if food_nutrients is not None:
            self.food_nutrients = food_nutrients
        if publication_date is not None:
            self.publication_date = publication_date
        if brand_owner is not None:
            self.brand_owner = brand_owner
        if gtin_upc is not None:
            self.gtin_upc = gtin_upc
        if ndb_number is not None:
            self.ndb_number = ndb_number
        if food_code is not None:
            self.food_code = food_code

    @property
    def data_type(self):
        """Gets the data_type of this AbridgedFoodItem.  # noqa: E501


        :return: The data_type of this AbridgedFoodItem.  # noqa: E501
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this AbridgedFoodItem.


        :param data_type: The data_type of this AbridgedFoodItem.  # noqa: E501
        :type: str
        """
        if data_type is None:
            raise ValueError("Invalid value for `data_type`, must not be `None`")  # noqa: E501

        self._data_type = data_type

    @property
    def description(self):
        """Gets the description of this AbridgedFoodItem.  # noqa: E501


        :return: The description of this AbridgedFoodItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AbridgedFoodItem.


        :param description: The description of this AbridgedFoodItem.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def fdc_id(self):
        """Gets the fdc_id of this AbridgedFoodItem.  # noqa: E501


        :return: The fdc_id of this AbridgedFoodItem.  # noqa: E501
        :rtype: int
        """
        return self._fdc_id

    @fdc_id.setter
    def fdc_id(self, fdc_id):
        """Sets the fdc_id of this AbridgedFoodItem.


        :param fdc_id: The fdc_id of this AbridgedFoodItem.  # noqa: E501
        :type: int
        """
        if fdc_id is None:
            raise ValueError("Invalid value for `fdc_id`, must not be `None`")  # noqa: E501

        self._fdc_id = fdc_id

    @property
    def food_nutrients(self):
        """Gets the food_nutrients of this AbridgedFoodItem.  # noqa: E501


        :return: The food_nutrients of this AbridgedFoodItem.  # noqa: E501
        :rtype: list[AbridgedFoodNutrient]
        """
        return self._food_nutrients

    @food_nutrients.setter
    def food_nutrients(self, food_nutrients):
        """Sets the food_nutrients of this AbridgedFoodItem.


        :param food_nutrients: The food_nutrients of this AbridgedFoodItem.  # noqa: E501
        :type: list[AbridgedFoodNutrient]
        """

        self._food_nutrients = food_nutrients

    @property
    def publication_date(self):
        """Gets the publication_date of this AbridgedFoodItem.  # noqa: E501


        :return: The publication_date of this AbridgedFoodItem.  # noqa: E501
        :rtype: str
        """
        return self._publication_date

    @publication_date.setter
    def publication_date(self, publication_date):
        """Sets the publication_date of this AbridgedFoodItem.


        :param publication_date: The publication_date of this AbridgedFoodItem.  # noqa: E501
        :type: str
        """

        self._publication_date = publication_date

    @property
    def brand_owner(self):
        """Gets the brand_owner of this AbridgedFoodItem.  # noqa: E501

        only applies to Branded Foods  # noqa: E501

        :return: The brand_owner of this AbridgedFoodItem.  # noqa: E501
        :rtype: str
        """
        return self._brand_owner

    @brand_owner.setter
    def brand_owner(self, brand_owner):
        """Sets the brand_owner of this AbridgedFoodItem.

        only applies to Branded Foods  # noqa: E501

        :param brand_owner: The brand_owner of this AbridgedFoodItem.  # noqa: E501
        :type: str
        """

        self._brand_owner = brand_owner

    @property
    def gtin_upc(self):
        """Gets the gtin_upc of this AbridgedFoodItem.  # noqa: E501

        only applies to Branded Foods  # noqa: E501

        :return: The gtin_upc of this AbridgedFoodItem.  # noqa: E501
        :rtype: str
        """
        return self._gtin_upc

    @gtin_upc.setter
    def gtin_upc(self, gtin_upc):
        """Sets the gtin_upc of this AbridgedFoodItem.

        only applies to Branded Foods  # noqa: E501

        :param gtin_upc: The gtin_upc of this AbridgedFoodItem.  # noqa: E501
        :type: str
        """

        self._gtin_upc = gtin_upc

    @property
    def ndb_number(self):
        """Gets the ndb_number of this AbridgedFoodItem.  # noqa: E501

        only applies to Foundation and SRLegacy Foods  # noqa: E501

        :return: The ndb_number of this AbridgedFoodItem.  # noqa: E501
        :rtype: int
        """
        return self._ndb_number

    @ndb_number.setter
    def ndb_number(self, ndb_number):
        """Sets the ndb_number of this AbridgedFoodItem.

        only applies to Foundation and SRLegacy Foods  # noqa: E501

        :param ndb_number: The ndb_number of this AbridgedFoodItem.  # noqa: E501
        :type: int
        """

        self._ndb_number = ndb_number

    @property
    def food_code(self):
        """Gets the food_code of this AbridgedFoodItem.  # noqa: E501

        only applies to Survey Foods  # noqa: E501

        :return: The food_code of this AbridgedFoodItem.  # noqa: E501
        :rtype: str
        """
        return self._food_code

    @food_code.setter
    def food_code(self, food_code):
        """Sets the food_code of this AbridgedFoodItem.

        only applies to Survey Foods  # noqa: E501

        :param food_code: The food_code of this AbridgedFoodItem.  # noqa: E501
        :type: str
        """

        self._food_code = food_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AbridgedFoodItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AbridgedFoodItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
